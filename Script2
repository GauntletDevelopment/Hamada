####################################################################################################

# DEFAULT MODULES

####################################################################################################

import ctypes
import hashlib
from io import BytesIO
import json
import keyboard
import math
import os
import requests
import subprocess
import sys
import threading
import time
import webbrowser

####################################################################################################

# CHECK IF PYTHON PACKAGES ARE INSTALLED

####################################################################################################


# Function to install a package using pip
def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

# List of required libraries
required_libraries = [
    'pyautogui',
    'pyperclip',
    'autoit',
    'PIL',  # Pillow includes Image, ImageFont, and ImageTk
    'customtkinter',
    'PyQt5',
    'pynput'
]

# Check and install missing libraries
for lib in required_libraries:
    try:
        __import__(lib)  # Try importing the library
    except ImportError:
        print(f"{lib} not found, installing...")
        if lib == 'PIL':  # Special case for PIL
            install('Pillow')
        else:
            install(lib)

# Check for tkinter separately, as it's part of the standard library but may not be installed on all systems
try:
    import tkinter
    from tkinter import *
except ImportError:
    print("tkinter not found, installing...")
    install('tkinter')  # tkinter might need to be installed separately on Linux in some cases

print("All libraries are installed. You can now use them.")


####################################################################################################

# IMPORT MODULES

####################################################################################################


import autoit
import pyautogui
import pyperclip
import tkinter
from tkinter import filedialog
import customtkinter
from PIL import Image
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import traceback
from pynput.mouse import Listener

####################################################################################################

# ERROR CATCHING

####################################################################################################

def handle_exception(exc_type, exc_value, exc_tb):
    # Only handle uncaught exceptions
    if issubclass(exc_type, KeyboardInterrupt):
        sys.__excepthook__(exc_type, exc_value, exc_tb)
        return

    # Create a formatted error message
    tb_str = ''.join(traceback.format_exception(exc_type, exc_value, exc_tb))
    error_message = f"An unexpected error occurred:\n\n{tb_str}"

    # Show the error in a QMessageBox
    app = QApplication.instance()  # Get the current QApplication instance
    QMessageBox.critical(None, "Error", error_message)

    # Optionally, print to console for debugging
    print(error_message)

# Set the custom exception hook globally
sys.excepthook = handle_exception



####################################################################################################

# DEFINE THE PIXELWARE DIRECTORY

####################################################################################################


currentDirectory = os.path.dirname(os.path.abspath(__file__)) # Get the directory where the current script (main.py) is located
parentDirectory = os.path.dirname(currentDirectory) # If you want to go up one directory to reference the 'PixelWare' folder
workspace = parentDirectory  # Path to the main folder (PixelWare)
assets = os.path.join(workspace, "assets")
settingsPath = os.path.join(workspace, "settings.json")


####################################################################################################

# FUNCTIONS

####################################################################################################


# Function that resizes an image and returns the new cropped image object
def resizeImage(reference):
    imagePath = None
    img = None

    # If imageName starts with "http" or "https", treat it as a URL
    if isinstance(reference, str) and reference.startswith("https"): # Download the image from the URL
        try:
            response = requests.get(reference)
            response.raise_for_status()  # Check if the request was successful
            img = Image.open(BytesIO(response.content))  # Open image from byte data
        except requests.exceptions.RequestException as e:
            raise FileNotFoundError(f"Failed to download image from URL: {e}")
    else:
        # Otherwise, treat it as a local image
        if os.path.exists(reference):
            imagePath = reference

        if imagePath == None:
            print("Image path not found")
            # raise FileNotFoundError(f"Image '{imageName}' not found as .png or .jpg in folder '{folder}'.")
        else:
            img = Image.open(imagePath)

    # Get the size of the image (width, height)

    if img != None:
        width, height = img.size
                # Calculate the dimensions for the square crop (use the smaller dimension)
        if width > height:
            # Crop the sides of the image (cut left and right)
            left = (width - height) // 2
            top = 0
            right = left + height
            bottom = height
        else:
            # Crop the top and bottom of the image (cut top and bottom)
            top = (height - width) // 2
            left = 0
            right = width
            bottom = top + width
        croppedImage = img.crop((left, top, right, bottom)) # Crop the image (this will remove edges and center it)
        resizedImage = croppedImage.resize((32, 32)) # Resize the cropped square image to 32x32 pixels
        resizedImage = resizedImage.convert("RGB") # Convert the image to RGB (in case it's RGBA or grayscale)
        return resizedImage # Return the resized image
    else:
        return None





####################################################################################################

# FUNCTIONS

####################################################################################################

with open(settingsPath,'r', encoding="utf8", errors='ignore') as f:
    settings = json.load(f)

exitLoopX = False
exitLoopY = False
exitLoopLockX = threading.Lock()
exitLoopLockY = threading.Lock()

def checkPress():
    global exitLoopX, exitLoopY
    while True:
        time.sleep(0.03)
        if keyboard.is_pressed("g"):
            with exitLoopLockY:
                exitLoopY = True
        if keyboard.is_pressed("f"):
            with exitLoopLockX:
                exitLoopX = True

# Generate the image (run: 1 = generate, 2 = diagnostic)
def generate(run):

    threading.Thread(target=checkPress, daemon=True).start()
    global exitLoopX, exitLoopY
    canvasX1 = settings['canvasX1']
    canvasY1 = settings['canvasY1']
    canvasX2 = settings['canvasX2']
    canvasY2 = settings['canvasY2']
    colorButtonX = settings['colorButtonX']
    colorButtonY = settings['colorButtonY']
    hexButtonX = settings['hexButtonX']
    hexButtonY = settings['hexButtonY']
    exitButtonX = settings['exitButtonX']
    exitButtonY = settings['exitButtonY']
    stepx = math.floor((canvasX2-canvasX1)/31)
    stepy = math.floor((canvasY2-canvasY1)/31)
    time.sleep(2)

    if (run == 1):

        entry = currentSelectedFile
        speed = window.getGeneratorSpeed()
        window.statusLabel.setText("Generating... [Press F to skip, G to stop]")
        genSpeed = math.floor(10/speed)
        image = resizeImage(entry)
        dy1 = canvasY1

        for y in range(0,32,1):

            t0 = time.time()
            with exitLoopLockY:
                if exitLoopY:  # Check if exitLoop is True
                    exitLoopY = False  # Reset for next generation
                    break  # Break out of the inner loop
            
            dy1 = canvasY1 + (y * (canvasY2 - canvasY1) // 31)

                
            for x in range(0,32,1):

                if x % 4 == 0:
                    t0 = time.time()
                
                with exitLoopLockX:
                    if exitLoopX or exitLoopY == True:  # Check if exitLoop is True
                        exitLoopX = False  # Reset for next generation
                        break  # Break out of the inner loop

                dx1 = canvasX1 + (x * (canvasX2 - canvasX1) // 31)
                color = image.getpixel((x, y))
                hexc = '%02x%02x%02x' % color
                pyperclip.copy(hexc)
                autoit.mouse_move(colorButtonX, colorButtonY, genSpeed)
                autoit.mouse_click()
                autoit.mouse_move(hexButtonX, hexButtonY, genSpeed)
                autoit.mouse_click()
                time.sleep(0.2)
                clipboard = pyperclip.paste()
                pyautogui.write(clipboard)
                autoit.mouse_move(exitButtonX, exitButtonY, genSpeed)
                autoit.mouse_click()
                autoit.mouse_move(dx1, dy1, genSpeed)
                autoit.mouse_click()
                if ((x-3) % 4 == 0):
                    t1 = time.time()
                    rowsLeft = 31-y
                    pixelsLeft = (32*rowsLeft)+(31-x)
                    minutes = math.floor((pixelsLeft/4)*(t1-t0)/60) # Divide pixelsLeft by 4 because we're checking every 4 pixels
                    seconds = math.floor((pixelsLeft/4)*(t1-t0)) - 60*minutes
                    window.statusLabel.setText(f"Generating... [Estimated time until finish: {minutes} minutes, {seconds} seconds]")

    elif (run == 2):
        dx1 = canvasX1
        for x in range(0, 32, 1):
            time.sleep(0.08)
            dx1 = canvasX1 + (x * (canvasX2 - canvasX1) // 31)
            autoit.mouse_move(dx1, canvasY1, 0)
        time.sleep(2)
        dy1 = canvasY1
        for y in range(0, 32, 1):
            time.sleep(0.08)
            dy1 = canvasY1 + (y * (canvasY2 - canvasY1) // 31)
            autoit.mouse_move(canvasX1, dy1, 0)

    window.statusLabel.setText("")


def openURL():
    webbrowser.open("https://www.youtube.com/watch?v=gs8qfL9PNac")  # Replace with your desired YouTube URL


####################################################################################################

# GRAPHICAL USER INTERFACE (VARIABLES)

####################################################################################################

currentSelectedFile = None # This is the image URL or file currently selected to be generated
editingCoordinates = False # Can you currently edit coordinates?
mouseCoordinates = None # Current mouse coordinates
currentButton = None # Which set coordinates button are you updating?
swindow = None # Store the current window


####################################################################################################

# GRAPHICAL USER INTERFACE (STYLES)

####################################################################################################

myappid = u'mycompany.myproduct.subproduct.version'
ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)

stylePreset = """
        QLabel {
            font-family: 'Segoe UI';
            font-size: 12px;
            color: #9c9c9c;
            border: 1px solid white;
            border-radius: 6px;
            background-color: transparent; /* Optional, can be customized */
            padding: 0px; /* Optional for better text alignment */
        }

        QLineEdit {
            font-family: 'Segoe UI';
            font-size: 14px;
            color: white;
            border: 1px solid white;
            border-radius: 6px;
            background-color: transparent; /* Optional, can be customized */
            padding: 0px; /* Optional for better text alignment */
        }

        QPushButton {
            font-family: 'Segoe UI';
            font-size: 14px;
            font-weight: bold;
            color: white;
            border: 1px solid white;
            border-radius: 6px;
            background-color: transparent;
            padding: 0px; /* Optional for better text alignment */
        }
        QPushButton:hover {
            background-color: #555555; /* Hover color */
            border-color: #AAAAAA;    /* Optional: Change border on hover */
        }
        QPushButton:pressed {
            background-color: #222222; /* Clicked color */
            border-color: #888888;    /* Optional: Change border on click */
        }
        """

stylePreset2 = """
        QPushButton {
            font-family: 'Segoe UI';
            font-size: 14px;
            font-weight: bold;
            color: white;
            border: 1px solid white;
            border-radius: 6px;
            background-color: #007bbd;
            padding: 0px; /* Optional for better text alignment */
        }
        QPushButton:hover {
            background-color: #555555; /* Hover color */
            border-color: #AAAAAA;    /* Optional: Change border on hover */
        }
        QPushButton:pressed {
            background-color: #222222; /* Clicked color */
            border-color: #888888;    /* Optional: Change border on click */
        }
        """

stylePreset3 = """
        QPushButton {
            font-family: 'Segoe UI';
            font-size: 14px;
            font-weight: bold;
            color: white;
            border: 1px solid white;
            border-radius: 6px;
            background-color: #007bbd;
            padding: 0px; /* Optional for better text alignment */
        }
        QPushButton:hover {
            background-color: #555555; /* Hover color */
            border-color: #AAAAAA;    /* Optional: Change border on hover */
        }
        QPushButton:pressed {
            background-color: #222222; /* Clicked color */
            border-color: #888888;    /* Optional: Change border on click */
        }
        """

####################################################################################################

# GRAPHICAL USER INTERFACE (VARIABLES)

####################################################################################################

editingCoordinates = False
mouseCoordinates = None
currentButton = None
swindow = None

####################################################################################################

# GRAPHICAL USER INTERFACE (OBJECTS)

####################################################################################################

# MAIN WINDOW

def centerWindow(w):
    screen_geometry = QApplication.desktop().screenGeometry() # Get the screen geometry (screen resolution)
    window_geometry = w.frameGeometry()
    x = (screen_geometry.width() - window_geometry.width()) // 2 # Calculate the position to center the window
    y = (screen_geometry.height() - window_geometry.height()) // 2
    w.move(x, y) # Move the window to the center of the screen

class MainWindow(QMainWindow):


    def getGeneratorSpeed(self):
        return int(self.generatorSpeedEntry.text())


    def pilToQPixmap(self, pil_image):
        img_byte_arr = BytesIO()  # Convert the PIL image to bytes
        pil_image.save(img_byte_arr, format='PNG')  # Save image as PNG in a byte stream
        img_byte_arr = img_byte_arr.getvalue()
        qimage = QImage.fromData(img_byte_arr) # Create QImage from bytes
        pixmap = QPixmap.fromImage(qimage).scaled(200,200) # Create QPixmap from QImage
        return pixmap


    # Opens an image and then displays that image using the filePath
    def selectImageFile(self):
        global currentSelectedFile
        filePath = filedialog.askopenfilename(filetypes=[("Image files", "*.png;*.jpg;*.jpeg")]) # Open the file dialog to select a PNG file
        if filePath:
            # Display the selected file path or load the image
            imageName = os.path.basename(filePath)
            self.displayImage(filePath)
            print("Displaying...")
            self.ignoreTextChanged = True
            self.imageReferenceEntry.setText(imageName)  # Insert the new text
            self.ignoreTextChanged = False
            currentSelectedFile = filePath

    
    # Function to display the image file in Tkinter (path: absolute path to the file)
    def displayImage(self, path):
        global currentSelectedFile
        resizedImage = resizeImage(path) # Call resizeImage with the file path as path
        if resizedImage != None:
            newPixmap = self.pilToQPixmap(resizedImage) # Convert the PIL image to customtkinter compatible format
            self.imagePreview.setPixmap(newPixmap) # Update the label's image
            currentSelectedFile = path
        else:
            defaultPixmap = QPixmap(os.path.join(assets, "default.png")).scaled(200, 200)
            self.imagePreview.setPixmap(defaultPixmap)


    # Function to display the image from a URL
    def displayImageFromEntry(self):
        if self.ignoreTextChanged == False:
            print("Displaying...")
            self.displayImage(self.imageReferenceEntry.text())


    def openSettings(self):
        global swindow
        print("Opening...")
        swindow = SettingsWindow()
        swindow.exec_()

    def __init__(self):

        super().__init__()
        self.ignoreTextChanged = False

        self.setWindowTitle("PixelWare")
        icon_path = os.path.join(workspace, "assets", "beasticon.ico")  # Adjust this path
        self.setWindowIcon(QIcon(icon_path))
        self.setStyleSheet("background-color: #161616;")
        self.setMinimumSize(540, 280)
        self.resize(540, 280)
        self.setWindowFlags(Qt.WindowStaysOnTopHint)
        centerWindow(self)

        pixelwareLabel = QLabel("PixelWare v1.4.0", self)
        pixelwareLabel.setFont(QFont("Segoe UI", 8))
        pixelwareLabel.setStyleSheet("color: white;")
        pixelwareLabel.move(10, 6)

        self.statusLabel = QLabel("", self)
        self.statusLabel.setFont(QFont("Segoe UI", 8))
        self.statusLabel.setStyleSheet("color: white;")
        self.statusLabel.move(0, 252)
        self.statusLabel.resize(540, 20)
        self.statusLabel.setAlignment(Qt.AlignCenter)

        self.imageReferenceEntry = QLineEdit(self)
        self.imageReferenceEntry.textChanged.connect(lambda: self.displayImageFromEntry())
        self.imageReferenceEntry.resize(200,25)
        self.imageReferenceEntry.move(40, 80)
        self.imageReferenceEntry.setPlaceholderText("Image URL")
        self.imageReferenceEntry.setStyleSheet(stylePreset)

        self.generatorSpeedEntry = QLineEdit(self)
        self.generatorSpeedEntry.resize(200,25)
        self.generatorSpeedEntry.move(40, 130)
        self.generatorSpeedEntry.setPlaceholderText("Generator speed")
        self.generatorSpeedEntry.setStyleSheet(stylePreset)

        folderButton = QPushButton(self)
        folderButton.setIcon(QIcon(os.path.join(assets, "folder.png")))  # Set your image path here
        folderButton.setIconSize(QSize(20, 20))
        folderButton.resize(20,20)
        folderButton.move(244,80)
        folderButton.setStyleSheet("background-color: transparent;")
        folderButton.clicked.connect(lambda: self.selectImageFile())
        
        settingsButton = QPushButton(self)
        settingsButton.setIcon(QIcon(os.path.join(assets, "settings.png")))  # Set your image path here
        settingsButton.setIconSize(QSize(20, 20))
        settingsButton.resize(20,20)
        settingsButton.move(510,13)
        settingsButton.setStyleSheet("background-color: transparent;")
        settingsButton.clicked.connect(self.openSettings)

        generateButton = QPushButton("Generate", self)
        generateButton.resize(90,30)
        generateButton.move(40,180)
        generateButton.setStyleSheet(stylePreset2)
        generateButton.clicked.connect(lambda: threading.Thread(target=generate, args=(1,)).start())

        diagnosticButton = QPushButton("Diagnostic", self)
        diagnosticButton.resize(90,30)
        diagnosticButton.move(150,180)
        diagnosticButton.setStyleSheet(stylePreset)
        diagnosticButton.clicked.connect(lambda: threading.Thread(target=generate, args=(2,)).start())

        urlButton = QPushButton(self)
        urlButton.setIcon(QIcon(os.path.join(assets, "beastlogo.png")))  # Set your image path here
        urlButton.setIconSize(QSize(20, 20))
        urlButton.resize(20,20)
        urlButton.move(485,14)
        urlButton.setStyleSheet("background-color: transparent;")
        urlButton.clicked.connect(openURL)
        
        # Set up a QLabel to display the image
        pixmap = QPixmap(os.path.join(assets, "default.png")).scaled(200,200)
        self.imagePreview = QLabel(self)
        self.imagePreview.setPixmap(pixmap)
        self.imagePreview.resize(200,200)
        self.imagePreview.move(300, 46)

        self.show()

####################################################################################################

# LOGIN WINDOW

class LoginWindow(QDialog):

    # Check the password to see if it matches the hash
    hash = "0ffd1b5296d2152a7472722c96a23ddcd7273339929974ee7493165d68de80eb"
    def checkPassword(self):
        hashObject = hashlib.sha256(self.passwordEntry.text().encode()).hexdigest()
        if hashObject == self.hash:
            self.accept()
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)  # Set the icon to 'Critical' for an error
            msg.setText("ERROR: Access denied")               # Set the message text
            msg.setWindowTitle("Error")        # Set the window title
            msg.exec_()

    def __init__(self):

        super().__init__()
        self.setWindowFlags(Qt.Window | Qt.WindowMinimizeButtonHint | Qt.WindowMaximizeButtonHint | Qt.WindowCloseButtonHint)

        self.setWindowTitle("PixelWare")
        icon_path = os.path.join(workspace, "assets", "beasticon.ico")  # Adjust this path
        self.setWindowIcon(QIcon(icon_path))
        self.setStyleSheet("background-color: #161616;")
        self.setMinimumSize(280, 250)
        self.resize(280, 250)
        centerWindow(self)

        loginLabel = QLabel("Please log in.", self)
        loginLabel.setStyleSheet("color: white;")
        loginLabel.setFont(QFont("Segoe UI", 10))
        loginLabel.setAlignment(Qt.AlignCenter)
        loginLabel.resize(280,20)
        loginLabel.move(0, 50)

        self.passwordEntry = QLineEdit(self)
        self.passwordEntry.resize(200,25)
        self.passwordEntry.move(40, 80)
        self.passwordEntry.setPlaceholderText("Password")
        self.passwordEntry.setStyleSheet(stylePreset)

        loginButton = QPushButton("Log In", self)
        loginButton.resize(80,30)
        loginButton.move(100,180)
        loginButton.setStyleSheet(stylePreset)
        loginButton.clicked.connect(self.checkPassword)



####################################################################################################

# SETTINGS WINDOW

class SettingsWindow(QDialog):
    
    def __init__(self):
        super().__init__()

        # Set up the layout
        self.setWindowTitle("PixelWare")
        icon_path = os.path.join(workspace, "assets", "beasticon.ico")  # Adjust this path
        self.setWindowIcon(QIcon(icon_path))
        self.setStyleSheet("background-color: #161616;")
        self.setMinimumSize(280, 250)
        self.resize(280, 250)
        centerWindow(self)
        self.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.listening_for_clicks = False

        gridLayout = QGridLayout()

        self.canvasTopLeft = QLabel(f"canvasTopLeft: {settings['canvasX1']}, {settings['canvasY1']}", self)
        self.canvasTopLeft.setStyleSheet(stylePreset)
        self.canvasTopLeft.setAlignment(Qt.AlignCenter)

        self.canvasBottomRight = QLabel(f"canvasBottomRight: {settings['canvasX2']}, {settings['canvasY2']}", self)
        self.canvasBottomRight.setStyleSheet(stylePreset)
        self.canvasBottomRight.setAlignment(Qt.AlignCenter)

        self.colorLabel = QLabel(f"colorButton: {settings['colorButtonX']}, {settings['colorButtonY']}", self)
        self.colorLabel.setStyleSheet(stylePreset)
        self.colorLabel.setAlignment(Qt.AlignCenter)

        self.hexPicker = QLabel(f"hexPickerButton: {settings['hexButtonX']}, {settings['hexButtonY']}", self)
        self.hexPicker.setStyleSheet(stylePreset)
        self.hexPicker.setAlignment(Qt.AlignCenter)

        self.exitLabel = QLabel(f"exitButton: {settings['exitButtonX']}, {settings['exitButtonY']}", self)
        self.exitLabel.setStyleSheet(stylePreset)
        self.exitLabel.setAlignment(Qt.AlignCenter)

        self.canvasTopLeftButton = QPushButton("Edit", self)
        self.canvasTopLeftButton.setStyleSheet(stylePreset)
        self.canvasTopLeftButton.clicked.connect(lambda: self.startEditingCoordinates(self.canvasTopLeftButton))
        self.canvasTopLeftButton.setObjectName("canvasTopLeftButton")

        self.canvasBottomRightButton = QPushButton("Edit", self)
        self.canvasBottomRightButton.setStyleSheet(stylePreset)
        self.canvasBottomRightButton.clicked.connect(lambda: self.startEditingCoordinates(self.canvasBottomRightButton))
        self.canvasBottomRightButton.setObjectName("canvasBottomRightButton")

        self.colorLabelButton = QPushButton("Edit", self)
        self.colorLabelButton.setStyleSheet(stylePreset)
        self.colorLabelButton.clicked.connect(lambda: self.startEditingCoordinates(self.colorLabelButton))
        self.colorLabelButton.setObjectName("colorLabelButton")

        self.hexPickerButton = QPushButton("Edit", self)
        self.hexPickerButton.setStyleSheet(stylePreset)
        self.hexPickerButton.clicked.connect(lambda: self.startEditingCoordinates(self.hexPickerButton))
        self.hexPickerButton.setObjectName("hexPickerButton")


        self.exitLabelButton = QPushButton("Edit", self)
        self.exitLabelButton.setStyleSheet(stylePreset)
        self.exitLabelButton.clicked.connect(lambda: self.startEditingCoordinates(self.exitLabelButton))
        self.exitLabelButton.setObjectName("exitLabelButton")

        gridLayout.addWidget(self.canvasTopLeft, 0, 0, 1, 2)
        gridLayout.addWidget(self.canvasTopLeftButton, 0, 2, 1, 1)
        gridLayout.addWidget(self.canvasBottomRight, 1, 0, 1, 2)
        gridLayout.addWidget(self.canvasBottomRightButton, 1, 2, 1, 1)
        gridLayout.addWidget(self.colorLabel, 2, 0, 1, 2)
        gridLayout.addWidget(self.colorLabelButton, 2, 2, 1, 1)
        gridLayout.addWidget(self.hexPicker, 3, 0, 1, 2)
        gridLayout.addWidget(self.hexPickerButton, 3, 2, 1, 1)
        gridLayout.addWidget(self.exitLabel, 4, 0, 1, 2)
        gridLayout.addWidget(self.exitLabelButton, 4, 2, 1, 1)
        self.setLayout(gridLayout)

    def startEditingCoordinates(self, button):
        global currentButton, editingCoordinates
        currentButton = button # Update the current button being edited
        editingCoordinates = True
        button.setStyleSheet(stylePreset3) # Change the color of the current button

####################################################################################################
 
def on_click(x, y, button, pressed):
    global mouseCoordinates, editingCoordinates, currentButton
    global settings
    if pressed:
        if editingCoordinates:
            editingCoordinates = False
            currentButton.setStyleSheet(stylePreset) # Reset the color of the current button
            mouseCoordinates = (x, y)
            x, y = mouseCoordinates

            # Update coordinates of json file and text of settings labels
    
            if id(currentButton) == id(swindow.canvasTopLeftButton):
                settings["canvasX1"] = x
                settings["canvasY1"] = y
                swindow.canvasTopLeft.setText(f"canvasTopLeft: {settings['canvasX1']}, {settings['canvasY1']}")
                with open(settingsPath,'w', encoding="utf8", errors='ignore') as f:
                    json.dump(settings, f, indent=4)
            if id(currentButton) == id(swindow.canvasBottomRightButton):
                settings["canvasX2"] = x
                settings["canvasY2"] = y
                swindow.canvasBottomRight.setText(f"canvasTopLeft: {settings['canvasX2']}, {settings['canvasY2']}")
                with open(settingsPath,'w', encoding="utf8", errors='ignore') as f:
                    json.dump(settings, f, indent=4)
            if id(currentButton) == id(swindow.colorLabelButton):
                settings["colorButtonX"] = x
                settings["colorButtonY"] = y
                swindow.colorLabel.setText(f"colorButton: {settings['colorButtonX']}, {settings['colorButtonY']}")
                with open(settingsPath,'w', encoding="utf8", errors='ignore') as f:
                    json.dump(settings, f, indent=4)
            if id(currentButton) == id(swindow.hexPickerButton):
                settings["hexButtonX"] = x
                settings["hexButtonY"] = y
                swindow.hexPicker.setText(f"hexPickerButton: {settings['hexButtonX']}, {settings['hexButtonY']}")
                with open(settingsPath,'w', encoding="utf8", errors='ignore') as f:
                    json.dump(settings, f, indent=4)
            if id(currentButton) == id(swindow.exitLabelButton):
                settings["exitButtonX"] = x
                settings["exitButtonY"] = y
                swindow.exitLabel.setText(f"exitButton: {settings['exitButtonX']}, {settings['exitButtonY']}")
                with open(settingsPath,'w', encoding="utf8", errors='ignore') as f:
                    json.dump(settings, f, indent=4)

# Function to start the listener in a separate thread
def start_listener():
    listener = Listener(on_click=on_click) # Start the mouse listener to listen globally
    listener.start()  # Start the listener in a non-blocking mode
    listener.join()  # Ensure the listener keeps running
listener_thread = threading.Thread(target=start_listener, daemon=True).start() # Create and start the listener thread

app = QApplication([])
loginWindow = LoginWindow()
#settingsWindow = SettingsWindow()
#settingsWindow.exec_()

if loginWindow.exec_() == QDialog.Accepted:
    # If login is successful, create and show the main window
    window = MainWindow()
    app.exec_()  # Start the event loop for the main window
else:
    print("Login failed or canceled, application will exit.")
